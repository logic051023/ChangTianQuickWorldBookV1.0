name: Build 长天快速世界书 APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-17-jdk \
          python3-pip python3-venv \
          build-essential wget curl
        
    - name: 安装Buildozer和依赖
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33 kivy==2.2.1
        buildozer --version
        
    - name: 创建Buildozer期望的完整目录结构
      run: |
        echo "=== 创建Buildozer期望的完整目录结构 ==="
        
        # 创建Buildozer期望的所有目录
        BUILDZOER_SDK_DIR="$HOME/.buildozer/android/platform/android-sdk"
        mkdir -p "$BUILDZOER_SDK_DIR/tools/bin"
        mkdir -p "$BUILDZOER_SDK_DIR/platform-tools"
        mkdir -p "$BUILDZOER_SDK_DIR/build-tools"
        mkdir -p "$BUILDZOER_SDK_DIR/licenses"
        mkdir -p "$HOME/.buildozer/android/platform/python-for-android"
        
        echo "Buildozer SDK目录: $BUILDZOER_SDK_DIR"
        echo "目录结构已创建"
        
    - name: 直接下载sdkmanager到Buildozer期望位置
      run: |
        echo "=== 直接下载sdkmanager到Buildozer期望位置 ==="
        
        BUILDZOER_SDK_DIR="$HOME/.buildozer/android/platform/android-sdk"
        
        # 下载命令行工具到Buildozer期望的tools/bin目录
        cd "$BUILDZOER_SDK_DIR"
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        
        # 解压到当前目录（tools/bin的父目录）
        unzip -q commandlinetools-linux-9477386_latest.zip
        rm commandlinetools-linux-9477386_latest.zip
        
        # 移动cmdline-tools到tools/bin目录
        if [ -d "cmdline-tools" ]; then
          mv cmdline-tools/bin/* tools/bin/
          mv cmdline-tools/lib tools/
          rm -rf cmdline-tools
          echo "✓ 已移动cmdline-tools到tools目录"
        else
          echo "⚠ cmdline-tools目录不存在，检查解压内容"
          ls -la
        fi
        
        # 确保sdkmanager在正确位置并且可执行
        if [ -f "tools/bin/sdkmanager" ]; then
          chmod +x tools/bin/sdkmanager
          echo "✓ sdkmanager已放置在正确位置并设置为可执行"
        else
          echo "✗ sdkmanager未找到在tools/bin目录"
          # 尝试在其他位置查找
          find . -name "sdkmanager" -type f 2>/dev/null | head -5
        fi
        
        # 设置环境变量
        echo "ANDROID_HOME=$BUILDZOER_SDK_DIR" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$BUILDZOER_SDK_DIR" >> $GITHUB_ENV
        echo "$BUILDZOER_SDK_DIR/tools/bin" >> $GITHUB_PATH
        echo "$BUILDZOER_SDK_DIR/platform-tools" >> $GITHUB_PATH
        
        # 验证安装
        echo "=== 验证sdkmanager安装 ==="
        echo "目录结构:"
        find "$BUILDZOER_SDK_DIR" -type f -name "sdkmanager" 2>/dev/null
        echo "sdkmanager测试:"
        "$BUILDZOER_SDK_DIR/tools/bin/sdkmanager" --version || echo "sdkmanager执行失败"
        
    - name: 安装Android平台和构建工具
      run: |
        echo "=== 安装Android平台和构建工具 ==="
        
        BUILDZOER_SDK_DIR="$HOME/.buildozer/android/platform/android-sdk"
        
        # 接受许可证
        mkdir -p "$BUILDZOER_SDK_DIR/licenses"
        echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "$BUILDZOER_SDK_DIR/licenses/android-sdk-license"
        echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > "$BUILDZOER_SDK_DIR/licenses/android-sdk-preview-license"
        echo -e "\nd56f5187479451eabf01fb78af6dfcb131a6481e" > "$BUILDZOER_SDK_DIR/licenses/android-sdk-arm-dbt-license"
        
        # 使用sdkmanager安装必要的包
        echo "安装platform-tools..."
        yes | "$BUILDZOER_SDK_DIR/tools/bin/sdkmanager" --sdk_root="$BUILDZOER_SDK_DIR" "platform-tools"
        
        echo "安装platforms;android-33..."
        yes | "$BUILDZOER_SDK_DIR/tools/bin/sdkmanager" --sdk_root="$BUILDZOER_SDK_DIR" "platforms;android-33"
        
        echo "安装build-tools;30.0.3..."
        yes | "$BUILDZOER_SDK_DIR/tools/bin/sdkmanager" --sdk_root="$BUILDZOER_SDK_DIR" "build-tools;30.0.3"
        
        # 验证安装
        echo "=== 验证安装 ==="
        echo "平台工具:"
        ls -la "$BUILDZOER_SDK_DIR/platform-tools/" || echo "平台工具未安装"
        echo "构建工具:"
        ls -la "$BUILDZOER_SDK_DIR/build-tools/" || echo "构建工具未安装"
        echo "AIDL工具:"
        find "$BUILDZOER_SDK_DIR" -name "aidl" -type f 2>/dev/null | head -5 || echo "AIDL工具未找到"
        
    - name: 构建APK
      run: |
        echo "=== 开始构建APK ==="
        
        # 设置环境变量
        export ANDROID_HOME="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROID_SDK_ROOT="$ANDROID_HOME"
        
        # 验证环境
        echo "当前环境变量:"
        echo "ANDROID_HOME=$ANDROID_HOME"
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
        
        # 验证sdkmanager位置
        echo "sdkmanager位置:"
        which sdkmanager || echo "sdkmanager不在PATH中"
        ls -la "$ANDROID_HOME/tools/bin/sdkmanager" || echo "sdkmanager不在期望位置"
        
        # 清理之前的构建
        echo "清理构建环境..."
        buildozer android clean 2>&1 | tee build.log || echo "清理完成"
        
        # 执行构建
        echo "开始构建APK..."
        set +e
        buildozer -v android debug 2>&1 | tee -a build.log
        BUILD_EXIT_CODE=${PIPESTATUS[0]}
        set -e
        echo "BUILD_EXIT_CODE=$BUILD_EXIT_CODE" >> $GITHUB_ENV
        echo "构建退出码: $BUILD_EXIT_CODE"
        
    - name: 检查构建结果
      if: always()
      run: |
        echo "=== 检查构建结果 ==="
        
        # 检查文件结构
        echo "项目文件结构:"
        find . -maxdepth 3 -name "*.apk" -o -name "build.log" -o -name "bin" -type d 2>/dev/null | head -20
        
        # 检查bin目录
        if [ -d "bin" ]; then
          echo "bin目录内容:"
          ls -la bin/ 2>/dev/null || echo "无法列出bin目录"
          apk_files=$(find bin -name "*.apk" -type f 2>/dev/null)
          if [ -n "$apk_files" ]; then
            echo "✓ 找到APK文件:"
            echo "$apk_files"
            for apk in $apk_files; do
              size=$(du -h "$apk" 2>/dev/null | cut -f1 || echo "未知大小")
              echo "  - $apk ($size)"
            done
          else
            echo "✗ bin目录中没有APK文件"
            echo "检查.buildozer目录..."
            find .buildozer -name "*.apk" -type f 2>/dev/null | head -10 || echo "未找到APK"
          fi
        else
          echo "✗ bin目录不存在"
          mkdir -p bin
        fi
        
        # 检查构建日志
        echo "=== 构建日志状态 ==="
        if [ -f "build.log" ]; then
          echo "构建日志大小: $(wc -l < build.log) 行"
          echo "构建日志关键信息:"
          grep -i "sdkmanager\|aidl\|error\|failed" build.log | tail -20 || echo "无关键信息"
        else
          echo "✗ 构建日志文件不存在"
        fi
        
    - name: 上传构建产物
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: APK构建结果
        path: |
          bin/*.apk
        retention-days: 7
        
    - name: 上传构建日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: 构建日志
        path: |
          build.log
        retention-days: 7
