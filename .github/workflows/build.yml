name: Build 长天快速世界书 APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-17-jdk \
          python3-pip python3-venv \
          build-essential
        
    - name: 安装Buildozer和依赖
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33 kivy==2.2.1
        buildozer --version
        
    - name: 验证Buildozer配置
      run: |
        # 跳过init，直接验证现有配置
        buildozer android checkconfig || echo "配置检查完成"
        
    - name: 安装Android SDK
      run: |
        # 创建Android SDK目录
        mkdir -p android-sdk
        
        # 下载命令行工具
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip -d android-sdk/
        mv android-sdk/cmdline-tools android-sdk/latest
        
        # 设置环境变量
        echo "ANDROID_HOME=$PWD/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$PWD/android-sdk" >> $GITHUB_ENV
        echo "$PWD/android-sdk/latest/bin" >> $GITHUB_PATH
        
        # 接受许可证
        mkdir -p android-sdk/licenses
        echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > android-sdk/licenses/android-sdk-license
        echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > android-sdk/licenses/android-sdk-preview-license
        
        # 安装必要的Android包
        yes | android-sdk/latest/bin/sdkmanager --sdk_root=$PWD/android-sdk \
          "platform-tools" \
          "platforms;android-33" \
          "build-tools;34.0.0" \
          "cmdline-tools;latest"
        
        # 验证安装
        echo "=== 验证Android SDK安装 ==="
        ls -la android-sdk/build-tools/ || echo "构建工具目录不存在"
        
    - name: 构建APK
      run: |
        echo "=== 开始构建APK ==="
        
        # 设置构建环境变量
        export ANDROID_HOME=$PWD/android-sdk
        export ANDROID_SDK_ROOT=$PWD/android-sdk
        
        # 清理之前的构建
        echo "清理构建环境..."
        buildozer android clean 2>&1 | tee -a build.log || echo "清理完成"
        
        # 执行构建（使用详细日志）
        echo "开始构建APK..."
        buildozer -v android debug 2>&1 | tee -a build.log
        
        # 保存退出码
        BUILD_EXIT_CODE=${PIPESTATUS[0]}
        echo "BUILD_EXIT_CODE=$BUILD_EXIT_CODE" >> $GITHUB_ENV
        echo "构建退出码: $BUILD_EXIT_CODE"
        
    - name: 检查构建结果
      if: always()
      run: |
        echo "=== 检查构建结果 ==="
        
        # 检查文件结构
        echo "项目文件结构:"
        find . -name "*.apk" -o -name "build.log" -o -name "bin" -type d | head -20
        
        # 检查bin目录
        if [ -d "bin" ]; then
          echo "bin目录内容:"
          ls -la bin/ || echo "无法列出bin目录"
          apk_files=$(find bin -name "*.apk" -type f)
          if [ -n "$apk_files" ]; then
            echo "✓ 找到APK文件:"
            echo "$apk_files"
            for apk in $apk_files; do
              size=$(du -h "$apk" | cut -f1)
              echo "  - $apk ($size)"
            done
          else
            echo "✗ bin目录中没有APK文件"
            echo "检查.buildozer目录..."
            find .buildozer -name "*.apk" -type f 2>/dev/null | head -10 || echo "未找到APK"
          fi
        else
          echo "✗ bin目录不存在"
          echo "创建bin目录以便后续步骤..."
          mkdir -p bin
        fi
        
        # 检查构建日志
        echo "=== 构建日志状态 ==="
        if [ -f "build.log" ]; then
          echo "构建日志大小: $(wc -l < build.log) 行"
          echo "构建日志最后50行:"
          tail -50 build.log
        else
          echo "✗ 构建日志文件不存在"
          echo "当前目录内容:"
          ls -la
        fi
        
    - name: 上传构建产物
      if: success() && steps.build.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: APK构建结果
        path: |
          bin/*.apk
          build.log
        retention-days: 7
        
    - name: 上传构建日志（失败时）
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: 构建失败日志
        path: |
          build.log
          .buildozer/
        retention-days: 7
